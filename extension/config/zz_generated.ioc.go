//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by ioc-go-cli

package config

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	autowireconfig "github.com/alibaba/ioc-golang/extension/autowire/config"
)

func init() {
	autowireconfig.RegisterStructDescriptor(&autowire.StructDescriptor{
		Interface: new(ConfigInt),
		Factory: func() interface{} {
			return new(ConfigInt)
		},
		ParamFactory: func() interface{} {
			return new(ConfigInt)
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(configIntInterface)
			impl := i.(*ConfigInt)
			return param.New(impl)
		},
	})
	autowireconfig.RegisterStructDescriptor(&autowire.StructDescriptor{
		Interface: new(ConfigMap),
		Factory: func() interface{} {
			return new(ConfigMap)
		},
		ParamFactory: func() interface{} {
			return new(ConfigMap)
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(configMapInterface)
			impl := i.(*ConfigMap)
			return param.New(impl)
		},
	})
	autowireconfig.RegisterStructDescriptor(&autowire.StructDescriptor{
		Interface: new(ConfigSlice),
		Factory: func() interface{} {
			return new(ConfigSlice)
		},
		ParamFactory: func() interface{} {
			return new(ConfigSlice)
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(configSliceInterface)
			impl := i.(*ConfigSlice)
			return param.New(impl)
		},
	})
	autowireconfig.RegisterStructDescriptor(&autowire.StructDescriptor{
		Interface: new(ConfigString),
		Factory: func() interface{} {
			return new(ConfigString)
		},
		ParamFactory: func() interface{} {
			return new(ConfigString)
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(configStringInterface)
			impl := i.(*ConfigString)
			return param.New(impl)
		},
	})
}

type configIntInterface interface {
	New(impl *ConfigInt) (*ConfigInt, error)
}
type configMapInterface interface {
	New(impl *ConfigMap) (*ConfigMap, error)
}
type configSliceInterface interface {
	New(impl *ConfigSlice) (*ConfigSlice, error)
}
type configStringInterface interface {
	New(impl *ConfigString) (*ConfigString, error)
}
