// Code generated by mockery v2.12.2. DO NOT EDIT.

/*
 * Copyright (c) 2022, Alibaba Group;
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	mysql "github.com/alibaba/IOC-Golang/extension/normal/mysql"

	testing "testing"
)

// Mysql is an autogenerated mock type for the Mysql type
type Mysql struct {
	mock.Mock
}

// Delete provides a mock function with given fields: toDeleteTarget
func (_m *Mysql) Delete(toDeleteTarget mysql.UserDefinedModel) error {
	ret := _m.Called(toDeleteTarget)

	var r0 error
	if rf, ok := ret.Get(0).(func(mysql.UserDefinedModel) error); ok {
		r0 = rf(toDeleteTarget)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// First provides a mock function with given fields: queryStr, findTarget, args
func (_m *Mysql) First(queryStr string, findTarget mysql.UserDefinedModel, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, queryStr, findTarget)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, mysql.UserDefinedModel, ...interface{}) error); ok {
		r0 = rf(queryStr, findTarget, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDB provides a mock function with given fields:
func (_m *Mysql) GetDB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: toInsertLines
func (_m *Mysql) Insert(toInsertLines mysql.UserDefinedModel) error {
	ret := _m.Called(toInsertLines)

	var r0 error
	if rf, ok := ret.Get(0).(func(mysql.UserDefinedModel) error); ok {
		r0 = rf(toInsertLines)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectWhere provides a mock function with given fields: queryStr, result, args
func (_m *Mysql) SelectWhere(queryStr string, result interface{}, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, queryStr, result)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...interface{}) error); ok {
		r0 = rf(queryStr, result, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: queryStr, field, target, args
func (_m *Mysql) Update(queryStr string, field string, target interface{}, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, queryStr, field, target)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}, ...interface{}) error); ok {
		r0 = rf(queryStr, field, target, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMysql creates a new instance of Mysql. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMysql(t testing.TB) *Mysql {
	mock := &Mysql{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
